#!/bin/sh

arg0=${0##*/}
help_text="Usage: $arg0 [-a] [-A] [-h] [-y <n>] [-m <n>]
                  [-d <n>] [-H <n>] [-M <n>] [<file>]...

Catch up on jj IRC logs starting from a relative time back

        -a      Show all messages instead of filtering status messages
        -A      Show almost all messages (includes important messages)
        -y <n>  Start n years back
        -m <n>  Start n months back
        -d <n>  Start n days back
        -H <n>  Start n hours back
        -M <n>  Start n minutes back
        -h      Display this help text and exit

 The final starting point in the logs, is the sum of all options. E.g.
 $arg0 -d 1 -d 1 -H 8 \#chan.log # 2 days and 8 hours. If no
 starting point is set, 1 hour will be used. If no file arguments are
 given, $arg0 tries to use relevant log files from \$IRC_DIR."

# Based on retail(1) by josuah.
awkscript='BEGIN {
	# Important status messages have a type suffix after "<->".
	filter = "^.{10} <->" (All ? " " : "")

	for (i = 1; i < ARGC; i++)
		files[ARGV[i]] = ""

	for (f in files)
		if ((getline files[f] <f) <= 0)
			delete files[f]

	while (length(files) > 0) {
		for (f in files)
			if (!(min in files) || files[f] < files[min])
				min = f

		if (files[min] >= start &&
			(all || files[min] !~ filter))
		{
			if (last != min) {
				print nl "==> " min " <=="
				nl = "\n"
				last = min
			}
			print(files[min])
		}

		if ((getline files[min] <min) <= 0)
			delete files[min]
	}
}'

main() {
	unset duration all All
	parse_options "$@"
	[ "$help_flag" = 1 ] && usage
	shift "$((OPTIND-1))"

	# Without file arguments, find log files with an mtime which falls
	# into $duration.
	[ $# -eq 0 ] && {
		days=$((duration / 86400))
		[ "$days" -eq 0 ] &&
			days=1

		set -- ${all:+-a} ${All:+-A} ${duration:+-M$((duration / 60))}

		exec find "${IRC_DIR:-$HOME/irc}" \
			-type f \
			-name "*.log" \
			-mtime "-$days" \
			-exec "$0" "$@" {} +
	}

	# Default to 1 hour of backlog.
	: ${duration:=3600}
	start=$(($(date +%s) - duration))

	exec awk \
		-v "start=$start" \
		-v "all=$all" \
		-v "All=$All" \
		"$awkscript" "$@"
}

usage() {
	[ $# -ne 0 ] && {
		exec >&2
		printf '%s: %s\n\n' "$arg0" "$*"
	}
	printf '%s\n' "$help_text"
	exit ${1:+1}
}

parse_options() {
	while getopts ":Aahy:m:d:H:M:" _opt; do
		case $_opt in
			:) usage "option '$OPTARG' requires a parameter" ;;
			\?) usage "unrecognized option '$OPTARG'" ;;
			h) help_flag=1 ;;
			a) all=1 ;;
			A) All=1 ;;
			*)
				case $OPTARG in *[!0-9]*|"")
					usage "Invalid number '$OPTARG'" ;;
				esac
			;;
		esac

		case $_opt in
			y) duration=$((OPTARG * 31536000 + duration)) ;;
			m) duration=$((OPTARG * 2592000 + duration)) ;;
			d) duration=$((OPTARG * 86400 + duration)) ;;
			H) duration=$((OPTARG * 3600 + duration)) ;;
			M) duration=$((OPTARG * 60 + duration)) ;;
		esac
	done
}

main "$@"
